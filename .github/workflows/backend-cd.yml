#name: CD - Deploy Backend
#
#on:
#  workflow_dispatch:
#  push:
#    branches:
#      - main
#    paths:
#      - backend/**
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:latest
#        env:
#          POSTGRES_USER: moody
#          POSTGRES_PASSWORD: password
#          POSTGRES_DB: customer
#        ports:
#          - 5432:5432
#        options:
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    defaults:
#      run:
#        working-directory: ./backend
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#          cache: 'maven'
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
#      - name: Set build number
#        id: build-number
#        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT
#      - name: Build Package Push with Maven
#        run: mvn -ntp -B verify -Ddocker.image.tag=${{steps.build-number.outputs.BUILD_NUMBER}} jib:build
#      - name: Update Dockerrun.aws.json api image tag with new build number
#        run: |
#          echo "Dockerrun.aws.json before updating tag"
#          cat ../Dockerrun.aws.json
#          sed -i -E 's_(muhammedbakur/customer-management-api:)([^"]*)_\1'${{steps.build-number.outputs.BUILD_NUMBER}}'_' ../Dockerrun.aws.json
#          echo "Dockerrun.aws.json after updating tag"
#          cat ../Dockerrun.aws.json
#
#      - name: Deploy to Render
#        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
#
#      - name: Deploy to Elastic Beanstalk
#        uses: einaregilsson/beanstalk-deploy@v21
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          application_name: ${{ secrets.EB_APPLICATION_NAME }}
#          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
#          version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
#          version_description: ${{ github.SHA }}
#          region: ${{ secrets.EB_REGION }}
#          deployment_package: Dockerrun.aws.json
#      - name: Commit and push Dockerrun.aws.json
#        run: |
#          git config user.name github-actions
#          git config user.email github-actions@github.com
#          git add ../Dockerrun.aws.json
#          git commit -m "Update Dockerrun.aws.json docker image with new tag ${{ steps.build-number.outputs.BUILD_NUMBER }}"
#          git push

#name: CD - Deploy Backend
#
#on:
#  workflow_dispatch:
#  push:
#    branches:
#      - main
#    paths:
#      - backend/**
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:latest
#        env:
#          POSTGRES_USER: moody
#          POSTGRES_PASSWORD: password
#          POSTGRES_DB: customer
#        ports:
#          - 5432:5432
#        options:
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    defaults:
#      run:
#        working-directory: ./backend
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#          cache: 'maven'
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
#
#      - name: Set build number
#        id: build-number
#        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT
#
#      - name: Build & Push Docker Image with Maven Jib
#        run: mvn -ntp -B verify -Ddocker.image.tag=${{steps.build-number.outputs.BUILD_NUMBER}} jib:build
#
#      - name: Deploy to Render
#        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

name: CD - Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: moody
          POSTGRES_PASSWORD: password
          POSTGRES_DB: customer
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Send Slack Message - Triggered
        run: >
          curl -X POST -H "Content-type: application/json"
          --data "{\"text\":\":rocket: New push detected. Commit: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}> - ${{ github.event.head_commit.message }}\"}"
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Set build number
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT

      - name: Send Slack Message - Build Started
        run: >
          curl -X POST -H "Content-type: application/json"
          --data "{\"text\":\":maven: Starting Maven Build...\"}"
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Build & Push Docker Image with Maven Jib
        run: mvn -ntp -B verify -Ddocker.image.tag=${{steps.build-number.outputs.BUILD_NUMBER}} jib:build

      - name: Send Slack Message - Image Pushed
        run: >
          curl -X POST -H "Content-type: application/json"
          --data "{\"text\":\":docker: Docker image *${{ steps.build-number.outputs.BUILD_NUMBER }}* pushed to Docker Hub âœ…\"}"
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Deploy to Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

      - name: Send Slack Message - Deployed
        run: >
          curl -X POST -H "Content-type: application/json"
          --data "{\"text\":\":white_check_mark: Deployment to *Render* completed successfully!\"}"
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Message - Job Status
        if: always()
        run: >
          curl -X POST -H "Content-type: application/json"
          --data "{\"text\":\":clipboard: Final Job Status: *${{ job.status }}*\"}"
          ${{ secrets.SLACK_WEBHOOK_URL }}
